03/05, 9:05pm, Serena. 
    - Really not all that sure what I'm doing.
    - Planning to go after an OO-looking architecture, so a clock will be an object. 
    - OK, not sure what type of communication I want between these clocks. How about a socket between each pair of models? Initialized after the models... (Spent some time looking at other solutions like ZMQ, can't find anything perfect) Resolution: one socket per clock, and all other clocks can send messages to that. 
        - One port per socket, which is questionable. 

03/06, 1:30pm, Serena
    - Start a thread per clock. Keep all class variables as well as a dictionary of all sockets which all clocks can access. 
        - Back to the question of the intereference of the GIL?
    - Startup code in clock.__init__(...), logical clock responses to go in clock.run(...)
    - Not sure how to determine the number of messages waiting for processing on a socket... 
    - Not sure how to get remaining time until timeout on a socket. 

03/06, 5pm, Serena  
    - So we want to use the socket's timeout to indicate that we are able to run another instruction. How does one do this without constantly using exception-catching, which seems like bad style? 