Design notes: 
    - despite previously promising to use adult languages for multithreaded programming, we decided to use a child language (Python) due to ease of controlling mFi smart powerstrips.
    
TO DO:
    X [DUE: 04/29] build hardware 
        X remove mirror from cabinet
        X replace mirror in cabinet w/ one-way mirror 
        X embed pi with webcam behind mirror
        X embed 12x+ lightbulbs in mirror 
        X set static IPs for mFi devices
    X [DUE: 04/30] webcam pulse capture
    X [DUE: 04/30] leader election via bully
        X 13 threads, 1 for pi, 12 for lightbulbs
        X assign UUIDS for 12 lightbulbs
        X on startup, run bully leader election
    X [DUE: 04/30] 
        X parallel control of 2x mFi devices 
    X [DUE: 05/01] Presentation draft
        X slides
        X demo working
    X [DUE: 05/02] Presentation
    _ [DUE: 05/07] Gossip algorithm! 
    _ [DUE: 05/09] Whole project, including documentation
        _ clean up code
        _ comment code
        _ create README
        _ write paper
            _ idea introduction, implementation details, results, conclusion
        _ capture video demo 

04/25
    - Physical hardware design finalized 
        - Embedding bulbs around a medicine cabinet
        - Using a webcam behind one-way glass to determine heartbeat of person before mirror
        - Pi, ethernet switch, 3x ethernet cables, 12x bulbs, 2x smart power strips, 1x nonsmart power strip embedded in cabinet
    - Bully! 
        - on startup, each bulb creates a list of all other bulb uuids 
            - if all 12 bulbs responded, max uuid bulb is leader
            - otherwise, wait up to 20 seconds. max uuid of the bulb responses is leader 
        - going forward, any bulb can query the current leader. If the leader doesn't respond within <x> seconds, bulb a declares an election
            - bulb a sends election message to all bulbs with higher uuid 
                - if no responses, bulb a becomes leader! 
                    - sends message to all bulbs with lower uuid to declare itself leader
                - if response, other bulb declares election. 

04/26   
    Today's goals: 
         any process can initiate an election
        - random timeout per socket, since we want to avoid having all bulbs initiate election at the same time

    Today's problems: 
        unable to kill a nonresponsive thread

    We want to avoid creating a connected graph for communication. 
        - We give the selected leader a "leader socket"
        - And each follower a "follower socket"
        - Any follower can query the leader. Given no response, the follower initiates an election. 
            - Design question: do we initialize sockets between the current process and the processes with higher ids?
            - or do we fall back on address manipulation

04/27
    Software side: 
        - After conversation with Waldo discussing modeling of virtual machines, we switched from using threads to using processes. 
        - While conversion was largely straightforward, we ran into an issue where we were creating local copies of memory which we intended to be  shared. We then decided to use the python Multiprocessing queue

    Hardware side: 
        - Installed picamera, got a demo running (camera_test.py)
        - Using paramiko, able to SSH directly to the power strips from Python 
        - Mirror and cabinet arrived! 

04/28
    - Dealing with a bug where each process has their own queue where we expect memory to be shared. Address of this queue is the same between processes?
        - Yay! Resolved! 
            - Had to switch queue type from Queue.Queue to multiprocessing.queues.Queue for process safety

    - Assign each bulb a "timeout" (random integer) which is the frequency with which they check that the leader is still alive

    TO DO: 
        - (SERENA) get pulse from picam
        - constant pings to and leader from followers every (randomtime)
            - leader responds saying it's alive
            - if no leader response, bulb initiates an election. 
                - pings all bulbs with higher UUIDs than itself
        - One queue used for checking if leader is alive and for leader elections
        - Another queue used for instructions to turn on or off
            - Only follow instructions to turn on or off if leader election queue is empty

        - When a new leader election is started, all the bulbs should turn off

4/29 - 4/30
    - Got the picamera up and running
    - Integrated the pulse code with the picamera as well as the leader election
    - Set up SSH connections via threads to both linux powerstrips 
    - Created a communication protocol for bulbs to communicate their on status to their neighbors
    - Using the "on" bulbs, wrote code to send turn the corresponding relays on and off. 

5/1
    Hardware:
        - Drilled holes in the the cabinet for the lightbulbs
        - Confirmed that code works for 4 bulbs
        - Ran into issue where we can only restart bulbs for new pulse by unplugging units and replugging them in, created fix for this in code
        - Painted inside of cabinet black to prevent any sort of issues with the surface being reflective

    Software
        - Changed number of bulbs to 13 rather than 12
        - Check for face's continued presence
        - Wrapped all the code in main in a while True loop so that we can "continue" when we want to rerun it for a new face
            - We're aware that this may be bad style, but it was the easiest way to get it working for right now, might change this later


5/2 
    - changed bulb 0 unable to communicate with bulb 12 (DONE)

5/3 
    - increased time for machine to continue displaying heartbeat after user leaves scene to 15 seconds (from 5 seconds)
    - allow operator to switch between pc and pi camera

    - Divying up tasks for working independently: 
        - (by author) cleanse code
        - (by author) comment code
        X (Serena) draft outline of paper
        - (Michelle) change bulb communication with neighbors
            - use state_q
            - instead of (neighbor).turnOn(), use queue to give msg to neighbor to turn on self. 
            - constantly check queue for message to turn on. 
        - (Michelle) finish leader election 
            - allow processes to reinitiate election
        - (Serena) convert control of powerstrips to processes and use backgrounds  
        - (Serena) give each bulb its own ssh connection to a powerstrip in a process, and allow it to time itself and turn itself on
        - (Saturday, together) gossip! 
            - have bulbs communicate with their neighbors every time they send a signal
            - have bulbs order the events (their signal vs. their neighbors), and make minor adjustments indirection of leader 

04/07: 
    Somewhat overambitious with finals.

    Today:
        X Convert powerstrips to background commands 
        X Convert powerstips to use processes in place of threads
        X Give each bulb its own SSH connection
        _ Change bulb communication with neighbors
        _ Gossip 
        _ Finish leader election

        (Goal) Gossip 